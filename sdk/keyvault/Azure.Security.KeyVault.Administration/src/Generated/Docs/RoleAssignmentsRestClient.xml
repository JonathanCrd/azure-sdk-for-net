<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DeleteAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code></example>
    </member>
    <member name="Delete(Uri,string,CancellationToken)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code></example>
    </member>
    <member name="DeleteAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="Delete(Uri,string,RequestContext)">
      <example>
This sample shows how to call Delete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Delete with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(Uri,string,RoleAssignmentCreateParameters,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
Response<Models.KeyVaultRoleAssignment> response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
]]></code>
This sample shows how to call CreateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
Response<Models.KeyVaultRoleAssignment> response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
]]></code></example>
    </member>
    <member name="Create(Uri,string,RoleAssignmentCreateParameters,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
Response<Models.KeyVaultRoleAssignment> response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
]]></code>
This sample shows how to call Create with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
Response<Models.KeyVaultRoleAssignment> response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
]]></code></example>
    </member>
    <member name="CreateAsync(Uri,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleDefinitionId = "<roleDefinitionId>",
        principalId = "<principalId>",
    },
});
Response response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleDefinitionId = "<roleDefinitionId>",
        principalId = "<principalId>",
    },
});
Response response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="Create(Uri,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleDefinitionId = "<roleDefinitionId>",
        principalId = "<principalId>",
    },
});
Response response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Create with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleDefinitionId = "<roleDefinitionId>",
        principalId = "<principalId>",
    },
});
Response response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="GetRoleAssignmentsRestClientAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleAssignmentsRestClientAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = await client.GetRoleAssignmentsRestClientAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code>
This sample shows how to call GetRoleAssignmentsRestClientAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = await client.GetRoleAssignmentsRestClientAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code></example>
    </member>
    <member name="GetRoleAssignmentsRestClient(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleAssignmentsRestClient.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = client.GetRoleAssignmentsRestClient(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code>
This sample shows how to call GetRoleAssignmentsRestClient with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response<Models.KeyVaultRoleAssignment> response = client.GetRoleAssignmentsRestClient(new Uri("http://localhost:3000"), "<roleAssignmentName>");
]]></code></example>
    </member>
    <member name="GetRoleAssignmentsRestClientAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleAssignmentsRestClientAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = await client.GetRoleAssignmentsRestClientAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleAssignmentsRestClientAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = await client.GetRoleAssignmentsRestClientAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="GetRoleAssignmentsRestClient(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleAssignmentsRestClient and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = client.GetRoleAssignmentsRestClient(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleAssignmentsRestClient with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

Response response = client.GetRoleAssignmentsRestClient(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
]]></code></example>
    </member>
    <member name="GetForScopesAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetForScopesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

await foreach (Models.KeyVaultRoleAssignment item in client.GetForScopesAsync(new Uri("http://localhost:3000")))
{
}
]]></code>
This sample shows how to call GetForScopesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

await foreach (Models.KeyVaultRoleAssignment item in client.GetForScopesAsync(new Uri("http://localhost:3000"), filter: "<$filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetForScopes(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetForScopes.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

foreach (Models.KeyVaultRoleAssignment item in client.GetForScopes(new Uri("http://localhost:3000")))
{
}
]]></code>
This sample shows how to call GetForScopes with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

foreach (Models.KeyVaultRoleAssignment item in client.GetForScopes(new Uri("http://localhost:3000"), filter: "<$filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetForScopesAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetForScopesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

await foreach (BinaryData item in client.GetForScopesAsync(new Uri("http://localhost:3000"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetForScopesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

await foreach (BinaryData item in client.GetForScopesAsync(new Uri("http://localhost:3000"), "<$filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
}
]]></code></example>
    </member>
    <member name="GetForScopes(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetForScopes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

foreach (BinaryData item in client.GetForScopes(new Uri("http://localhost:3000"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetForScopes with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleAssignmentsRestClient client = new RoleAssignmentsRestClient(endpoint, credential);

foreach (BinaryData item in client.GetForScopes(new Uri("http://localhost:3000"), "<$filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>