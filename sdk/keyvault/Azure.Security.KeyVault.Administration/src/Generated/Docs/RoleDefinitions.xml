<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DeleteAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code></example>
    </member>
    <member name="Delete(Uri,string,CancellationToken)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code></example>
    </member>
    <member name="DeleteAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="Delete(Uri,string,RequestContext)">
      <example>
This sample shows how to call Delete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Delete with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(Uri,string,RoleDefinitionCreateParameters,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties());
Response<RoleDefinition> response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
{
    RoleName = "<roleName>",
    Description = "<description>",
    RoleType = RoleType.BuiltInRole,
    Permissions = {new Permission
    {
        Actions = {"<actions>"},
        NotActions = {"<notActions>"},
        DataActions = {DataAction.ReadHsmKey},
        NotDataActions = {DataAction.ReadHsmKey},
    }},
    AssignableScopes = { RoleScope.Global },
});
Response<RoleDefinition> response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(Uri,string,RoleDefinitionCreateParameters,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties());
Response<RoleDefinition> response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
]]></code>
This sample shows how to call CreateOrUpdate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
{
    RoleName = "<roleName>",
    Description = "<description>",
    RoleType = RoleType.BuiltInRole,
    Permissions = {new Permission
    {
        Actions = {"<actions>"},
        NotActions = {"<notActions>"},
        DataActions = {DataAction.ReadHsmKey},
        NotDataActions = {DataAction.ReadHsmKey},
    }},
    AssignableScopes = { RoleScope.Global },
});
Response<RoleDefinition> response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(Uri,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

using RequestContent content = RequestContent.Create(new
{
    properties = new object(),
});
Response response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleName = "<roleName>",
        description = "<description>",
        type = "AKVBuiltInRole",
        permissions = new object[]
        {
            new
            {
                actions = new object[]
                {
                    "<actions>"
                },
                notActions = new object[]
                {
                    "<notActions>"
                },
                dataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/read/action"
                },
                notDataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/read/action"
                },
            }
        },
        assignableScopes = new object[]
        {
            "/"
        },
    },
});
Response response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(Uri,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

using RequestContent content = RequestContent.Create(new
{
    properties = new object(),
});
Response response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleName = "<roleName>",
        description = "<description>",
        type = "AKVBuiltInRole",
        permissions = new object[]
        {
            new
            {
                actions = new object[]
                {
                    "<actions>"
                },
                notActions = new object[]
                {
                    "<notActions>"
                },
                dataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/read/action"
                },
                notDataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/read/action"
                },
            }
        },
        assignableScopes = new object[]
        {
            "/"
        },
    },
});
Response response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinitionAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = await client.GetRoleDefinitionAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code>
This sample shows how to call GetRoleDefinitionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = await client.GetRoleDefinitionAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code></example>
    </member>
    <member name="GetRoleDefinition(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinition.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = client.GetRoleDefinition(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code>
This sample shows how to call GetRoleDefinition with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response<RoleDefinition> response = client.GetRoleDefinition(new Uri("http://localhost:3000"), "<roleDefinitionName>");
]]></code></example>
    </member>
    <member name="GetRoleDefinitionAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = await client.GetRoleDefinitionAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleDefinitionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = await client.GetRoleDefinitionAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinition(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinition and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = client.GetRoleDefinition(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleDefinition with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

Response response = client.GetRoleDefinition(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsAsync(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

await foreach (RoleDefinition item in client.GetRoleDefinitionsAsync(new Uri("http://localhost:3000")))
{
}
]]></code>
This sample shows how to call GetRoleDefinitionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

await foreach (RoleDefinition item in client.GetRoleDefinitionsAsync(new Uri("http://localhost:3000"), filter: "<$filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitions(Uri,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitions.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

foreach (RoleDefinition item in client.GetRoleDefinitions(new Uri("http://localhost:3000")))
{
}
]]></code>
This sample shows how to call GetRoleDefinitions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

foreach (RoleDefinition item in client.GetRoleDefinitions(new Uri("http://localhost:3000"), filter: "<$filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsAsync(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

await foreach (BinaryData item in client.GetRoleDefinitionsAsync(new Uri("http://localhost:3000"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetRoleDefinitionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

await foreach (BinaryData item in client.GetRoleDefinitionsAsync(new Uri("http://localhost:3000"), "<$filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitions(Uri,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

foreach (BinaryData item in client.GetRoleDefinitions(new Uri("http://localhost:3000"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetRoleDefinitions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitions client = new KeyVaultClient(endpoint, credential).GetRoleDefinitionsClient();

foreach (BinaryData item in client.GetRoleDefinitions(new Uri("http://localhost:3000"), "<$filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
}
]]></code></example>
    </member>
  </members>
</doc>