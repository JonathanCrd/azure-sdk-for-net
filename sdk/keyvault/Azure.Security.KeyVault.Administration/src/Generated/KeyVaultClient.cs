// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Security.KeyVault.Administration.Models;

namespace Azure.Security.KeyVault.Administration
{
    // Data plane generated client.
    /// <summary> The KeyVault service client. </summary>
    public partial class KeyVaultClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of KeyVaultClient for mocking. </summary>
        protected KeyVaultClient()
        {
        }

        /// <summary> Initializes a new instance of KeyVaultClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public KeyVaultClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new KeyVaultClientOptions())
        {
        }

        /// <summary> Initializes a new instance of KeyVaultClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public KeyVaultClient(Uri endpoint, TokenCredential credential, KeyVaultClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new KeyVaultClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Returns the status of full backup operation. </summary>
        /// <param name="jobId"> The id returned as part of the backup request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupStatusAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<FullBackupOperation>> FullBackupStatusAsync(string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await FullBackupStatusAsync(jobId, context).ConfigureAwait(false);
            return Response.FromValue(FullBackupOperation.FromResponse(response), response);
        }

        /// <summary> Returns the status of full backup operation. </summary>
        /// <param name="jobId"> The id returned as part of the backup request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupStatus(string,CancellationToken)']/*" />
        public virtual Response<FullBackupOperation> FullBackupStatus(string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = FullBackupStatus(jobId, context);
            return Response.FromValue(FullBackupOperation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Returns the status of full backup operation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullBackupStatusAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The id returned as part of the backup request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupStatusAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> FullBackupStatusAsync(string jobId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullBackupStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullBackupStatusRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns the status of full backup operation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullBackupStatus(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The id returned as part of the backup request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupStatus(string,RequestContext)']/*" />
        public virtual Response FullBackupStatus(string jobId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullBackupStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullBackupStatusRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Pre-backup operation for checking whether the customer can perform a full
        /// backup operation.
        /// </summary>
        /// <param name="preBackupOperationParameters"> Optional parameters to validate prior to performing a full backup operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullBackupAsync(PreBackupOperationParameters,CancellationToken)']/*" />
        public virtual async Task<Response<FullBackupOperation>> PreFullBackupAsync(PreBackupOperationParameters preBackupOperationParameters = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = preBackupOperationParameters?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PreFullBackupAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(FullBackupOperation.FromResponse(response), response);
        }

        /// <summary>
        /// Pre-backup operation for checking whether the customer can perform a full
        /// backup operation.
        /// </summary>
        /// <param name="preBackupOperationParameters"> Optional parameters to validate prior to performing a full backup operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullBackup(PreBackupOperationParameters,CancellationToken)']/*" />
        public virtual Response<FullBackupOperation> PreFullBackup(PreBackupOperationParameters preBackupOperationParameters = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = preBackupOperationParameters?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = PreFullBackup(content, context);
            return Response.FromValue(FullBackupOperation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Pre-backup operation for checking whether the customer can perform a full
        /// backup operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PreFullBackupAsync(PreBackupOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullBackupAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PreFullBackupAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.PreFullBackup");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePreFullBackupRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Pre-backup operation for checking whether the customer can perform a full
        /// backup operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PreFullBackup(PreBackupOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullBackup(RequestContent,RequestContext)']/*" />
        public virtual Response PreFullBackup(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.PreFullBackup");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePreFullBackupRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the status of restore operation. </summary>
        /// <param name="jobId"> The Job Id returned part of the restore operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='RestoreStatusAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<RestoreOperation>> RestoreStatusAsync(string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RestoreStatusAsync(jobId, context).ConfigureAwait(false);
            return Response.FromValue(RestoreOperation.FromResponse(response), response);
        }

        /// <summary> Returns the status of restore operation. </summary>
        /// <param name="jobId"> The Job Id returned part of the restore operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='RestoreStatus(string,CancellationToken)']/*" />
        public virtual Response<RestoreOperation> RestoreStatus(string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RestoreStatus(jobId, context);
            return Response.FromValue(RestoreOperation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Returns the status of restore operation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RestoreStatusAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The Job Id returned part of the restore operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='RestoreStatusAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> RestoreStatusAsync(string jobId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.RestoreStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestoreStatusRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns the status of restore operation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RestoreStatus(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The Job Id returned part of the restore operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='RestoreStatus(string,RequestContext)']/*" />
        public virtual Response RestoreStatus(string jobId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.RestoreStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestoreStatusRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Pre-restore operation for checking whether the customer can perform a full
        /// restore operation.
        /// </summary>
        /// <param name="preRestoreOperationParameters"> Optional pre restore parameters to validate prior to performing a full restore operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="preRestoreOperationParameters"/> is null. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullRestoreOperationAsync(PreRestoreOperationParameters,CancellationToken)']/*" />
        public virtual async Task<Response<RestoreOperation>> PreFullRestoreOperationAsync(PreRestoreOperationParameters preRestoreOperationParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(preRestoreOperationParameters, nameof(preRestoreOperationParameters));

            using RequestContent content = preRestoreOperationParameters.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PreFullRestoreOperationAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(RestoreOperation.FromResponse(response), response);
        }

        /// <summary>
        /// Pre-restore operation for checking whether the customer can perform a full
        /// restore operation.
        /// </summary>
        /// <param name="preRestoreOperationParameters"> Optional pre restore parameters to validate prior to performing a full restore operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="preRestoreOperationParameters"/> is null. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullRestoreOperation(PreRestoreOperationParameters,CancellationToken)']/*" />
        public virtual Response<RestoreOperation> PreFullRestoreOperation(PreRestoreOperationParameters preRestoreOperationParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(preRestoreOperationParameters, nameof(preRestoreOperationParameters));

            using RequestContent content = preRestoreOperationParameters.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = PreFullRestoreOperation(content, context);
            return Response.FromValue(RestoreOperation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Pre-restore operation for checking whether the customer can perform a full
        /// restore operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PreFullRestoreOperationAsync(PreRestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullRestoreOperationAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PreFullRestoreOperationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.PreFullRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePreFullRestoreOperationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Pre-restore operation for checking whether the customer can perform a full
        /// restore operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PreFullRestoreOperation(PreRestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='PreFullRestoreOperation(RequestContent,RequestContext)']/*" />
        public virtual Response PreFullRestoreOperation(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.PreFullRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePreFullRestoreOperationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates key vault account setting, stores it, then returns the setting name and value to the client.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='UpdateSettingAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateSettingAsync(string settingName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.UpdateSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSettingRequest(settingName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates key vault account setting, stores it, then returns the setting name and value to the client.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='UpdateSetting(string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateSetting(string settingName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.UpdateSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSettingRequest(settingName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specified account setting object. </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Retrieves the setting object of a specified setting name. </remarks>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettingAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<KeyVaultSetting>> GetSettingAsync(string settingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSettingAsync(settingName, context).ConfigureAwait(false);
            return Response.FromValue(KeyVaultSetting.FromResponse(response), response);
        }

        /// <summary> Get specified account setting object. </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Retrieves the setting object of a specified setting name. </remarks>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSetting(string,CancellationToken)']/*" />
        public virtual Response<KeyVaultSetting> GetSetting(string settingName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSetting(settingName, context);
            return Response.FromValue(KeyVaultSetting.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get specified account setting object.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSettingAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettingAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSettingAsync(string settingName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.GetSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSettingRequest(settingName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get specified account setting object.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSetting(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingName"> The name of the account setting. Must be a valid settings option. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSetting(string,RequestContext)']/*" />
        public virtual Response GetSetting(string settingName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(settingName, nameof(settingName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.GetSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSettingRequest(settingName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List account settings. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Retrieves a list of all the available account settings that can be configured. </remarks>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettingsAsync(CancellationToken)']/*" />
        public virtual async Task<Response<SettingsListResult>> GetSettingsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSettingsAsync(context).ConfigureAwait(false);
            return Response.FromValue(SettingsListResult.FromResponse(response), response);
        }

        /// <summary> List account settings. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Retrieves a list of all the available account settings that can be configured. </remarks>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettings(CancellationToken)']/*" />
        public virtual Response<SettingsListResult> GetSettings(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSettings(context);
            return Response.FromValue(SettingsListResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] List account settings.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSettingsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettingsAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetSettingsAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.GetSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSettingsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List account settings.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSettings(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='GetSettings(RequestContext)']/*" />
        public virtual Response GetSettings(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.GetSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSettingsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a full backup using a user-provided SAS token to an Azure blob storage
        /// container.
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="azureStorageBlobContainerUri">
        /// Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be
        /// stored. This token needs to be valid for at least next 24 hours from the time of making this call.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupAsync(WaitUntil,SASTokenParameter,CancellationToken)']/*" />
        public virtual async Task<Operation> FullBackupAsync(WaitUntil waitUntil, SASTokenParameter azureStorageBlobContainerUri = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = azureStorageBlobContainerUri?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return await FullBackupAsync(waitUntil, content, context).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a full backup using a user-provided SAS token to an Azure blob storage
        /// container.
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="azureStorageBlobContainerUri">
        /// Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be
        /// stored. This token needs to be valid for at least next 24 hours from the time of making this call.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackup(WaitUntil,SASTokenParameter,CancellationToken)']/*" />
        public virtual Operation FullBackup(WaitUntil waitUntil, SASTokenParameter azureStorageBlobContainerUri = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = azureStorageBlobContainerUri?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return FullBackup(waitUntil, content, context);
        }

        /// <summary>
        /// [Protocol Method] Creates a full backup using a user-provided SAS token to an Azure blob storage
        /// container.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullBackupAsync(WaitUntil,SASTokenParameter,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackupAsync(WaitUntil,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation> FullBackupAsync(WaitUntil waitUntil, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullBackup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullBackupRequest(content, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "KeyVaultClient.FullBackup", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a full backup using a user-provided SAS token to an Azure blob storage
        /// container.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullBackup(WaitUntil,SASTokenParameter,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullBackup(WaitUntil,RequestContent,RequestContext)']/*" />
        public virtual Operation FullBackup(WaitUntil waitUntil, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullBackup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullBackupRequest(content, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "KeyVaultClient.FullBackup", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Restores all key materials using the SAS token pointing to a previously stored
        /// Azure Blob storage backup folder
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreBlobDetails"/> is null. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullRestoreOperationAsync(WaitUntil,RestoreOperationParameters,CancellationToken)']/*" />
        public virtual async Task<Operation> FullRestoreOperationAsync(WaitUntil waitUntil, RestoreOperationParameters restoreBlobDetails, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreBlobDetails, nameof(restoreBlobDetails));

            using RequestContent content = restoreBlobDetails.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return await FullRestoreOperationAsync(waitUntil, content, context).ConfigureAwait(false);
        }

        /// <summary>
        /// Restores all key materials using the SAS token pointing to a previously stored
        /// Azure Blob storage backup folder
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreBlobDetails"/> is null. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullRestoreOperation(WaitUntil,RestoreOperationParameters,CancellationToken)']/*" />
        public virtual Operation FullRestoreOperation(WaitUntil waitUntil, RestoreOperationParameters restoreBlobDetails, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreBlobDetails, nameof(restoreBlobDetails));

            using RequestContent content = restoreBlobDetails.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return FullRestoreOperation(waitUntil, content, context);
        }

        /// <summary>
        /// [Protocol Method] Restores all key materials using the SAS token pointing to a previously stored
        /// Azure Blob storage backup folder
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullRestoreOperationAsync(WaitUntil,RestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullRestoreOperationAsync(WaitUntil,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation> FullRestoreOperationAsync(WaitUntil waitUntil, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullRestoreOperationRequest(content, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "KeyVaultClient.FullRestoreOperation", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Restores all key materials using the SAS token pointing to a previously stored
        /// Azure Blob storage backup folder
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FullRestoreOperation(WaitUntil,RestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='FullRestoreOperation(WaitUntil,RequestContent,RequestContext)']/*" />
        public virtual Operation FullRestoreOperation(WaitUntil waitUntil, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.FullRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFullRestoreOperationRequest(content, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "KeyVaultClient.FullRestoreOperation", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Restores all key versions of a given key using user supplied SAS token pointing
        /// to a previously stored Azure Blob storage backup folder
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
        /// <param name="restoreBlobDetails">
        /// The Azure blob SAS token pointing to a folder where the previous successful
        /// full backup was stored
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='SelectiveKeyRestoreOperationAsync(WaitUntil,string,SelectiveKeyRestoreOperationParameters,CancellationToken)']/*" />
        public virtual async Task<Operation> SelectiveKeyRestoreOperationAsync(WaitUntil waitUntil, string keyName, SelectiveKeyRestoreOperationParameters restoreBlobDetails = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using RequestContent content = restoreBlobDetails?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return await SelectiveKeyRestoreOperationAsync(waitUntil, keyName, content, context).ConfigureAwait(false);
        }

        /// <summary>
        /// Restores all key versions of a given key using user supplied SAS token pointing
        /// to a previously stored Azure Blob storage backup folder
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
        /// <param name="restoreBlobDetails">
        /// The Azure blob SAS token pointing to a folder where the previous successful
        /// full backup was stored
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='SelectiveKeyRestoreOperation(WaitUntil,string,SelectiveKeyRestoreOperationParameters,CancellationToken)']/*" />
        public virtual Operation SelectiveKeyRestoreOperation(WaitUntil waitUntil, string keyName, SelectiveKeyRestoreOperationParameters restoreBlobDetails = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using RequestContent content = restoreBlobDetails?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return SelectiveKeyRestoreOperation(waitUntil, keyName, content, context);
        }

        /// <summary>
        /// [Protocol Method] Restores all key versions of a given key using user supplied SAS token pointing
        /// to a previously stored Azure Blob storage backup folder
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SelectiveKeyRestoreOperationAsync(WaitUntil,string,SelectiveKeyRestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='SelectiveKeyRestoreOperationAsync(WaitUntil,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation> SelectiveKeyRestoreOperationAsync(WaitUntil waitUntil, string keyName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.SelectiveKeyRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSelectiveKeyRestoreOperationRequest(keyName, content, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "KeyVaultClient.SelectiveKeyRestoreOperation", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Restores all key versions of a given key using user supplied SAS token pointing
        /// to a previously stored Azure Blob storage backup folder
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SelectiveKeyRestoreOperation(WaitUntil,string,SelectiveKeyRestoreOperationParameters,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/KeyVaultClient.xml" path="doc/members/member[@name='SelectiveKeyRestoreOperation(WaitUntil,string,RequestContent,RequestContext)']/*" />
        public virtual Operation SelectiveKeyRestoreOperation(WaitUntil waitUntil, string keyName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultClient.SelectiveKeyRestoreOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSelectiveKeyRestoreOperationRequest(keyName, content, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "KeyVaultClient.SelectiveKeyRestoreOperation", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private RoleDefinitions _cachedRoleDefinitions;
        private RoleAssignments _cachedRoleAssignments;

        /// <summary> Initializes a new instance of RoleDefinitions. </summary>
        public virtual RoleDefinitions GetRoleDefinitionsClient()
        {
            return Volatile.Read(ref _cachedRoleDefinitions) ?? Interlocked.CompareExchange(ref _cachedRoleDefinitions, new RoleDefinitions(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedRoleDefinitions;
        }

        /// <summary> Initializes a new instance of RoleAssignments. </summary>
        public virtual RoleAssignments GetRoleAssignmentsClient()
        {
            return Volatile.Read(ref _cachedRoleAssignments) ?? Interlocked.CompareExchange(ref _cachedRoleAssignments, new RoleAssignments(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedRoleAssignments;
        }

        internal HttpMessage CreateFullBackupStatusRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/backup/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/pending", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFullBackupRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/backup", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePreFullBackupRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/prebackup", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRestoreStatusRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/restore/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/pending", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePreFullRestoreOperationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/prerestore", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateFullRestoreOperationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/restore", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSelectiveKeyRestoreOperationRequest(string keyName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/keys/", false);
            uri.AppendPath(keyName, true);
            uri.AppendPath("/restore", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateSettingRequest(string settingName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/settings/", false);
            uri.AppendPath(settingName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSettingRequest(string settingName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/settings/", false);
            uri.AppendPath(settingName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSettingsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/settings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
