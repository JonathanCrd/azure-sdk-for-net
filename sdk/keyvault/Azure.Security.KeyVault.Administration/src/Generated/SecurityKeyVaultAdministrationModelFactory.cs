// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Security.KeyVault.Administration.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class SecurityKeyVaultAdministrationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.FullBackupOperation"/>. </summary>
        /// <param name="status"> Status of the backup operation. </param>
        /// <param name="statusDetails"> The status details of backup operation. </param>
        /// <param name="error"> Error encountered, if any, during the full backup operation. </param>
        /// <param name="startTime"> The start time of the backup operation in UTC. </param>
        /// <param name="endTime"> The end time of the backup operation in UTC. </param>
        /// <param name="jobId"> Identifier for the full backup operation. </param>
        /// <param name="azureStorageBlobContainerUri"> The Azure blob storage container Uri which contains the full backup. </param>
        /// <returns> A new <see cref="Models.FullBackupOperation"/> instance for mocking. </returns>
        public static FullBackupOperation FullBackupOperation(OperationStatus? status = null, string statusDetails = null, Error error = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string jobId = null, string azureStorageBlobContainerUri = null)
        {
            return new FullBackupOperation(
                status,
                statusDetails,
                error,
                startTime,
                endTime,
                jobId,
                azureStorageBlobContainerUri,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Error"/>. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="innerError"> The key vault server error. </param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string code = null, string message = null, Error innerError = null)
        {
            return new Error(code, message, innerError, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SASTokenParameter"/>. </summary>
        /// <param name="storageResourceUri"> Azure Blob storage container Uri. </param>
        /// <param name="token"> The SAS token pointing to an Azure Blob storage container. </param>
        /// <param name="useManagedIdentity">
        /// Indicates which authentication method should be used. If set to true, Managed
        /// HSM will use the configured user-assigned managed identity to authenticate with
        /// Azure Storage. Otherwise, a SAS token has to be specified.
        /// </param>
        /// <returns> A new <see cref="Models.SASTokenParameter"/> instance for mocking. </returns>
        public static SASTokenParameter SASTokenParameter(string storageResourceUri = null, string token = null, bool? useManagedIdentity = null)
        {
            return new SASTokenParameter(storageResourceUri, token, useManagedIdentity, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RestoreOperation"/>. </summary>
        /// <param name="status"> Status of the restore operation. </param>
        /// <param name="statusDetails"> The status details of restore operation. </param>
        /// <param name="error"> Error encountered, if any, during the restore operation. </param>
        /// <param name="jobId"> Identifier for the restore operation. </param>
        /// <param name="startTime"> The start time of the restore operation. </param>
        /// <param name="endTime"> The end time of the restore operation. </param>
        /// <returns> A new <see cref="Models.RestoreOperation"/> instance for mocking. </returns>
        public static RestoreOperation RestoreOperation(OperationStatus? status = null, string statusDetails = null, Error error = null, string jobId = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null)
        {
            return new RestoreOperation(
                status,
                statusDetails,
                error,
                jobId,
                startTime,
                endTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Administration.KeyVaultSetting"/>. </summary>
        /// <param name="name"> The account setting to be updated. </param>
        /// <param name="content"> The value of the pool setting. </param>
        /// <param name="settingType"> The type specifier of the value. </param>
        /// <returns> A new <see cref="Administration.KeyVaultSetting"/> instance for mocking. </returns>
        public static KeyVaultSetting KeyVaultSetting(string name = null, string content = null, KeyVaultSettingType? settingType = null)
        {
            return new KeyVaultSetting(name, content, settingType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SettingsListResult"/>. </summary>
        /// <param name="settings">
        /// A response message containing a list of account settings with their associated
        /// value.
        /// </param>
        /// <returns> A new <see cref="Models.SettingsListResult"/> instance for mocking. </returns>
        public static SettingsListResult SettingsListResult(IEnumerable<KeyVaultSetting> settings = null)
        {
            settings ??= new List<KeyVaultSetting>();

            return new SettingsListResult(settings?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoleAssignment"/>. </summary>
        /// <param name="id"> The role assignment ID. </param>
        /// <param name="name"> The role assignment name. </param>
        /// <param name="type"> The role assignment type. </param>
        /// <param name="properties"> Role assignment properties. </param>
        /// <returns> A new <see cref="Models.RoleAssignment"/> instance for mocking. </returns>
        public static RoleAssignment RoleAssignment(string id = null, string name = null, string type = null, RoleAssignmentPropertiesWithScope properties = null)
        {
            return new RoleAssignment(id, name, type, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoleAssignmentPropertiesWithScope"/>. </summary>
        /// <param name="scope"> The role scope. </param>
        /// <param name="roleDefinitionId"> The role definition ID. </param>
        /// <param name="principalId"> The principal ID. </param>
        /// <returns> A new <see cref="Models.RoleAssignmentPropertiesWithScope"/> instance for mocking. </returns>
        public static RoleAssignmentPropertiesWithScope RoleAssignmentPropertiesWithScope(RoleScope? scope = null, string roleDefinitionId = null, string principalId = null)
        {
            return new RoleAssignmentPropertiesWithScope(scope, roleDefinitionId, principalId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoleDefinition"/>. </summary>
        /// <param name="id"> The role definition ID. </param>
        /// <param name="name"> The role definition name. </param>
        /// <param name="type"> The role definition type. </param>
        /// <param name="properties"> Role definition properties. </param>
        /// <returns> A new <see cref="Models.RoleDefinition"/> instance for mocking. </returns>
        public static RoleDefinition RoleDefinition(string id = null, string name = null, RoleDefinitionType? type = null, RoleDefinitionProperties properties = null)
        {
            return new RoleDefinition(id, name, type, properties, serializedAdditionalRawData: null);
        }
    }
}
