// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Security.KeyVault.Administration.Models;
using NUnit.Framework;

namespace Azure.Security.KeyVault.Administration.Samples
{
    public partial class Samples_RoleDefinitionsRestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = client.Delete(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
            });
            Response response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
            });
            Response response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties());
            Response<RoleDefinition> response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties());
            Response<RoleDefinition> response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleName = "<roleName>",
                    description = "<description>",
                    type = "AKVBuiltInRole",
                    permissions = new object[]
            {
new
{
actions = new object[]
{
"<actions>"
},
notActions = new object[]
{
"<notActions>"
},
dataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/read/action"
},
notDataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/read/action"
},
}
            },
                    assignableScopes = new object[]
            {
"/"
            },
                },
            });
            Response response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleName = "<roleName>",
                    description = "<description>",
                    type = "AKVBuiltInRole",
                    permissions = new object[]
            {
new
{
actions = new object[]
{
"<actions>"
},
notActions = new object[]
{
"<notActions>"
},
dataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/read/action"
},
notDataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/read/action"
},
}
            },
                    assignableScopes = new object[]
            {
"/"
            },
                },
            });
            Response response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
            {
                RoleName = "<roleName>",
                Description = "<description>",
                RoleType = KeyVaultRoleType.BuiltInRole,
                Permissions = {new KeyVaultPermission
{
Actions = {"<actions>"},
NotActions = {"<notActions>"},
DataActions = {KeyVaultDataAction.ReadHsmKey},
NotDataActions = {KeyVaultDataAction.ReadHsmKey},
}},
                AssignableScopes = { KeyVaultRoleScope.Global },
            });
            Response<RoleDefinition> response = client.CreateOrUpdate(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
            {
                RoleName = "<roleName>",
                Description = "<description>",
                RoleType = KeyVaultRoleType.BuiltInRole,
                Permissions = {new KeyVaultPermission
{
Actions = {"<actions>"},
NotActions = {"<notActions>"},
DataActions = {KeyVaultDataAction.ReadHsmKey},
NotDataActions = {KeyVaultDataAction.ReadHsmKey},
}},
                AssignableScopes = { KeyVaultRoleScope.Global },
            });
            Response<RoleDefinition> response = await client.CreateOrUpdateAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.GetRoleDefinitionsRestClient(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.GetRoleDefinitionsRestClientAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = client.GetRoleDefinitionsRestClient(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = await client.GetRoleDefinitionsRestClientAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.GetRoleDefinitionsRestClient(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.GetRoleDefinitionsRestClientAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = client.GetRoleDefinitionsRestClient(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<RoleDefinition> response = await client.GetRoleDefinitionsRestClientAsync(new Uri("http://localhost:3000"), "<roleDefinitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (BinaryData item in client.GetRoleDefinitionsRestClients(new Uri("http://localhost:3000"), null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (BinaryData item in client.GetRoleDefinitionsRestClientsAsync(new Uri("http://localhost:3000"), null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (RoleDefinition item in client.GetRoleDefinitionsRestClients(new Uri("http://localhost:3000")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (RoleDefinition item in client.GetRoleDefinitionsRestClientsAsync(new Uri("http://localhost:3000")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (BinaryData item in client.GetRoleDefinitionsRestClients(new Uri("http://localhost:3000"), "<$filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (BinaryData item in client.GetRoleDefinitionsRestClientsAsync(new Uri("http://localhost:3000"), "<$filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("roleName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assignableScopes")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (RoleDefinition item in client.GetRoleDefinitionsRestClients(new Uri("http://localhost:3000"), filter: "<$filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (RoleDefinition item in client.GetRoleDefinitionsRestClientsAsync(new Uri("http://localhost:3000"), filter: "<$filter>"))
            {
            }
        }
    }
}
