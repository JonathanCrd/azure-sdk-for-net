// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Security.KeyVault.Administration.Models;
using NUnit.Framework;

namespace Azure.Security.KeyVault.Administration.Samples
{
    public partial class Samples_BackupRestoreRestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackupStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = client.FullBackupStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackupStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = await client.FullBackupStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackupStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = client.FullBackupStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackupStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = await client.FullBackupStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackupStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = client.FullBackupStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("azureStorageBlobContainerUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackupStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = await client.FullBackupStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("azureStorageBlobContainerUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackupStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = client.FullBackupStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackupStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = await client.FullBackupStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullBackup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.PreFullBackup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullBackup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.PreFullBackupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullBackup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = client.PreFullBackup();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullBackup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<FullBackupDetailsInternal> response = await client.PreFullBackupAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullBackup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                storageResourceUri = "<storageResourceUri>",
                token = "<token>",
                useManagedIdentity = true,
            });
            Response response = client.PreFullBackup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("azureStorageBlobContainerUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullBackup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                storageResourceUri = "<storageResourceUri>",
                token = "<token>",
                useManagedIdentity = true,
            });
            Response response = await client.PreFullBackupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("azureStorageBlobContainerUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullBackup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreBackupOperationParameters preBackupOperationParameters = new PreBackupOperationParameters
            {
                StorageResourceUri = "<storageResourceUri>",
                Token = "<token>",
                UseManagedIdentity = true,
            };
            Response<FullBackupDetailsInternal> response = client.PreFullBackup(preBackupOperationParameters: preBackupOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullBackup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreBackupOperationParameters preBackupOperationParameters = new PreBackupOperationParameters
            {
                StorageResourceUri = "<storageResourceUri>",
                Token = "<token>",
                UseManagedIdentity = true,
            };
            Response<FullBackupDetailsInternal> response = await client.PreFullBackupAsync(preBackupOperationParameters: preBackupOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_RestoreStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = client.RestoreStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_RestoreStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = await client.RestoreStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_RestoreStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<RestoreDetailsInternal> response = client.RestoreStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_RestoreStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<RestoreDetailsInternal> response = await client.RestoreStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_RestoreStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = client.RestoreStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_RestoreStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response response = await client.RestoreStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_RestoreStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<RestoreDetailsInternal> response = client.RestoreStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_RestoreStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Response<RestoreDetailsInternal> response = await client.RestoreStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullRestoreOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.PreFullRestoreOperation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullRestoreOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PreFullRestoreOperationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullRestoreOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreRestoreOperationParameters preRestoreOperationParameters = new PreRestoreOperationParameters();
            Response<RestoreDetailsInternal> response = client.PreFullRestoreOperation(preRestoreOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullRestoreOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreRestoreOperationParameters preRestoreOperationParameters = new PreRestoreOperationParameters();
            Response<RestoreDetailsInternal> response = await client.PreFullRestoreOperationAsync(preRestoreOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullRestoreOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folderToRestore = "<folderToRestore>",
            });
            Response response = client.PreFullRestoreOperation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullRestoreOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folderToRestore = "<folderToRestore>",
            });
            Response response = await client.PreFullRestoreOperationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statusDetails").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_PreFullRestoreOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreRestoreOperationParameters preRestoreOperationParameters = new PreRestoreOperationParameters
            {
                SasTokenParameters = new SASTokenParameter("<storageResourceUri>")
                {
                    Token = "<token>",
                    UseManagedIdentity = true,
                },
                FolderToRestore = "<folderToRestore>",
            };
            Response<RestoreDetailsInternal> response = client.PreFullRestoreOperation(preRestoreOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_PreFullRestoreOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            PreRestoreOperationParameters preRestoreOperationParameters = new PreRestoreOperationParameters
            {
                SasTokenParameters = new SASTokenParameter("<storageResourceUri>")
                {
                    Token = "<token>",
                    UseManagedIdentity = true,
                },
                FolderToRestore = "<folderToRestore>",
            };
            Response<RestoreDetailsInternal> response = await client.PreFullRestoreOperationAsync(preRestoreOperationParameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Operation operation = client.FullBackup(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Operation operation = await client.FullBackupAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Operation operation = client.FullBackup(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Operation operation = await client.FullBackupAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                storageResourceUri = "<storageResourceUri>",
                token = "<token>",
                useManagedIdentity = true,
            });
            Operation operation = client.FullBackup(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                storageResourceUri = "<storageResourceUri>",
                token = "<token>",
                useManagedIdentity = true,
            });
            Operation operation = await client.FullBackupAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullBackup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            SASTokenParameter azureStorageBlobContainerUri = new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            };
            Operation operation = client.FullBackup(WaitUntil.Completed, azureStorageBlobContainerUri: azureStorageBlobContainerUri);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullBackup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            SASTokenParameter azureStorageBlobContainerUri = new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            };
            Operation operation = await client.FullBackupAsync(WaitUntil.Completed, azureStorageBlobContainerUri: azureStorageBlobContainerUri);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullRestoreOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                },
                folderToRestore = "<folderToRestore>",
            });
            Operation operation = client.FullRestoreOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullRestoreOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                },
                folderToRestore = "<folderToRestore>",
            });
            Operation operation = await client.FullRestoreOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullRestoreOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            RestoreOperationParameters restoreBlobDetails = new RestoreOperationParameters(new SASTokenParameter("<storageResourceUri>"), "<folderToRestore>");
            Operation operation = client.FullRestoreOperation(WaitUntil.Completed, restoreBlobDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullRestoreOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            RestoreOperationParameters restoreBlobDetails = new RestoreOperationParameters(new SASTokenParameter("<storageResourceUri>"), "<folderToRestore>");
            Operation operation = await client.FullRestoreOperationAsync(WaitUntil.Completed, restoreBlobDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullRestoreOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folderToRestore = "<folderToRestore>",
            });
            Operation operation = client.FullRestoreOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullRestoreOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folderToRestore = "<folderToRestore>",
            });
            Operation operation = await client.FullRestoreOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_FullRestoreOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            RestoreOperationParameters restoreBlobDetails = new RestoreOperationParameters(new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            }, "<folderToRestore>");
            Operation operation = client.FullRestoreOperation(WaitUntil.Completed, restoreBlobDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_FullRestoreOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            RestoreOperationParameters restoreBlobDetails = new RestoreOperationParameters(new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            }, "<folderToRestore>");
            Operation operation = await client.FullRestoreOperationAsync(WaitUntil.Completed, restoreBlobDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Operation operation = client.SelectiveKeyRestoreOperation(WaitUntil.Completed, "<keyName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = null;
            Operation operation = await client.SelectiveKeyRestoreOperationAsync(WaitUntil.Completed, "<keyName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Operation operation = client.SelectiveKeyRestoreOperation(WaitUntil.Completed, "<keyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            Operation operation = await client.SelectiveKeyRestoreOperationAsync(WaitUntil.Completed, "<keyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folder = "<folder>",
            });
            Operation operation = client.SelectiveKeyRestoreOperation(WaitUntil.Completed, "<keyName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sasTokenParameters = new
                {
                    storageResourceUri = "<storageResourceUri>",
                    token = "<token>",
                    useManagedIdentity = true,
                },
                folder = "<folder>",
            });
            Operation operation = await client.SelectiveKeyRestoreOperationAsync(WaitUntil.Completed, "<keyName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            SelectiveKeyRestoreOperationParameters restoreBlobDetails = new SelectiveKeyRestoreOperationParameters(new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            }, "<folder>");
            Operation operation = client.SelectiveKeyRestoreOperation(WaitUntil.Completed, "<keyName>", restoreBlobDetails: restoreBlobDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BackupRestoreRestClient_SelectiveKeyRestoreOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BackupRestoreRestClient client = new BackupRestoreRestClient(endpoint, credential);

            SelectiveKeyRestoreOperationParameters restoreBlobDetails = new SelectiveKeyRestoreOperationParameters(new SASTokenParameter("<storageResourceUri>")
            {
                Token = "<token>",
                UseManagedIdentity = true,
            }, "<folder>");
            Operation operation = await client.SelectiveKeyRestoreOperationAsync(WaitUntil.Completed, "<keyName>", restoreBlobDetails: restoreBlobDetails);
        }
    }
}
