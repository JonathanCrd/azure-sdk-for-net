// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Security.KeyVault.Administration.Models;
using NUnit.Framework;

namespace Azure.Security.KeyVault.Administration.Samples
{
    public partial class Samples_RoleAssignments
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Delete_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Delete_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Delete_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = client.Delete(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Delete_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = await client.DeleteAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleDefinitionId = "<roleDefinitionId>",
                    principalId = "<principalId>",
                },
            });
            Response response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleDefinitionId = "<roleDefinitionId>",
                    principalId = "<principalId>",
                },
            });
            Response response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
            Response<RoleAssignment> response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
            Response<RoleAssignment> response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleDefinitionId = "<roleDefinitionId>",
                    principalId = "<principalId>",
                },
            });
            Response response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleDefinitionId = "<roleDefinitionId>",
                    principalId = "<principalId>",
                },
            });
            Response response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
            Response<RoleAssignment> response = client.Create(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            RoleAssignmentCreateParameters parameters = new RoleAssignmentCreateParameters(new RoleAssignmentProperties("<roleDefinitionId>", "<principalId>"));
            Response<RoleAssignment> response = await client.CreateAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetRoleAssignment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = client.GetRoleAssignment(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetRoleAssignment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = await client.GetRoleAssignmentAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetRoleAssignment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = client.GetRoleAssignment(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetRoleAssignment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = await client.GetRoleAssignmentAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetRoleAssignment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = client.GetRoleAssignment(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetRoleAssignment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response response = await client.GetRoleAssignmentAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetRoleAssignment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = client.GetRoleAssignment(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetRoleAssignment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            Response<RoleAssignment> response = await client.GetRoleAssignmentAsync(new Uri("http://localhost:3000"), "<roleAssignmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetForScopes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            foreach (BinaryData item in client.GetForScopes(new Uri("http://localhost:3000"), null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetForScopes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            await foreach (BinaryData item in client.GetForScopesAsync(new Uri("http://localhost:3000"), null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetForScopes_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            foreach (RoleAssignment item in client.GetForScopes(new Uri("http://localhost:3000")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetForScopes_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            await foreach (RoleAssignment item in client.GetForScopesAsync(new Uri("http://localhost:3000")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetForScopes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            foreach (BinaryData item in client.GetForScopes(new Uri("http://localhost:3000"), "<$filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetForScopes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            await foreach (BinaryData item in client.GetForScopesAsync(new Uri("http://localhost:3000"), "<$filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("roleDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("principalId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleAssignments_GetForScopes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            foreach (RoleAssignment item in client.GetForScopes(new Uri("http://localhost:3000"), filter: "<$filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleAssignments_GetForScopes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleAssignments client = new KeyVaultClient(endpoint, credential).GetRoleAssignmentsClient();

            await foreach (RoleAssignment item in client.GetForScopesAsync(new Uri("http://localhost:3000"), filter: "<$filter>"))
            {
            }
        }
    }
}
